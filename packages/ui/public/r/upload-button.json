{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "upload-button",
  "type": "registry:component",
  "title": "Upload Button",
  "description": "Simple file upload button with built-in file input and upload handling.",
  "dependencies": [
    "pushduck",
    "lucide-react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/default/upload-button/upload-button.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Loader2, Upload } from \"lucide-react\";\nimport { useUploadRoute } from \"pushduck/client\";\nimport * as React from \"react\";\n\nexport interface UploadButtonProps {\n  /** Upload route name from your API */\n  route: string;\n  /** Accepted file types (MIME types or extensions) */\n  accept?: string;\n  /** Whether to allow multiple files */\n  multiple?: boolean;\n  /** Custom button text */\n  children?: React.ReactNode;\n  /** Callback when files are selected */\n  onFilesSelected?: (files: File[]) => void;\n  /** Callback when upload completes */\n  onUploadComplete?: (results: any[]) => void;\n  /** Callback when upload fails */\n  onUploadError?: (error: Error) => void;\n  /** Button variant */\n  variant?: \"default\" | \"secondary\" | \"outline\" | \"ghost\";\n  /** Button size */\n  size?: \"sm\" | \"md\" | \"lg\";\n  /** Custom className */\n  className?: string;\n  /** Disabled state */\n  disabled?: boolean;\n}\n\nexport function UploadButton({\n  route,\n  accept,\n  multiple = false,\n  children,\n  onFilesSelected,\n  onUploadComplete,\n  onUploadError,\n  variant = \"default\",\n  size = \"md\",\n  className,\n  disabled = false,\n  ...props\n}: UploadButtonProps) {\n  const fileInputRef = React.useRef<HTMLInputElement>(null);\n\n  const { uploadFiles, isUploading } = useUploadRoute(route, {\n    onSuccess: onUploadComplete,\n    onError: onUploadError,\n  });\n\n  const handleClick = () => {\n    if (!disabled && !isUploading) {\n      fileInputRef.current?.click();\n    }\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    if (files.length > 0) {\n      onFilesSelected?.(files);\n      uploadFiles(files);\n    }\n    // Reset input value to allow selecting the same file again\n    e.target.value = \"\";\n  };\n\n  const variantClasses = {\n    default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n    secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n    outline:\n      \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n    ghost: \"hover:bg-accent hover:text-accent-foreground\",\n  };\n\n  const sizeClasses = {\n    sm: \"h-8 px-3 text-xs\",\n    md: \"h-10 px-4 py-2\",\n    lg: \"h-11 px-8 text-lg\",\n  };\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        className={cn(\n          \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n          variantClasses[variant],\n          sizeClasses[size],\n          className\n        )}\n        onClick={handleClick}\n        disabled={disabled || isUploading}\n        {...props}\n      >\n        {isUploading ? (\n          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n        ) : (\n          <Upload className=\"mr-2 h-4 w-4\" />\n        )}\n        {children || (isUploading ? \"Uploading...\" : \"Upload Files\")}\n      </button>\n\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        className=\"hidden\"\n        accept={accept}\n        multiple={multiple}\n        onChange={handleFileChange}\n        disabled={disabled || isUploading}\n      />\n    </>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}