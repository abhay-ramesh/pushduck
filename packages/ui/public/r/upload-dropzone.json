{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "upload-dropzone",
  "type": "registry:component",
  "title": "Upload Dropzone",
  "description": "A drag-and-drop file upload zone with support for multiple files, file type validation, and size limits.",
  "dependencies": [
    "pushduck",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "progress"
  ],
  "files": [
    {
      "path": "registry/default/upload-dropzone/upload-dropzone.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { AlertCircle, Upload } from \"lucide-react\";\nimport { useUploadRoute } from \"pushduck/client\";\nimport * as React from \"react\";\n\nexport interface UploadDropzoneProps {\n  /** Upload route name from your API */\n  route: string;\n  /** Accepted file types (MIME types or extensions) */\n  accept?: string;\n  /** Maximum file size in bytes */\n  maxSize?: number;\n  /** Maximum number of files */\n  maxFiles?: number;\n  /** Whether to allow multiple files */\n  multiple?: boolean;\n  /** Custom validation function */\n  validator?: (files: File[]) => string | null;\n  /** Callback when files are dropped/selected */\n  onFilesAdded?: (files: File[]) => void;\n  /** Callback when upload completes */\n  onUploadComplete?: (results: any[]) => void;\n  /** Callback when upload fails */\n  onUploadError?: (error: Error) => void;\n  /** Custom className */\n  className?: string;\n  /** Custom content when not dragging */\n  children?: React.ReactNode;\n  /** Custom content when dragging */\n  dragContent?: React.ReactNode;\n  /** Disabled state */\n  disabled?: boolean;\n}\n\nexport function UploadDropzone({\n  route,\n  accept,\n  maxSize = 10 * 1024 * 1024, // 10MB default\n  maxFiles = 10,\n  multiple = true,\n  validator,\n  onFilesAdded,\n  onUploadComplete,\n  onUploadError,\n  className,\n  children,\n  dragContent,\n  disabled = false,\n  ...props\n}: UploadDropzoneProps) {\n  const [isDragOver, setIsDragOver] = React.useState(false);\n  const [errors, setErrors] = React.useState<string[]>([]);\n  const fileInputRef = React.useRef<HTMLInputElement>(null);\n\n  const { upload, files, isUploading } = useUploadRoute(route, {\n    onUploadComplete: (results) => {\n      setErrors([]);\n      onUploadComplete?.(results);\n    },\n    onUploadError: (error) => {\n      setErrors([error.message]);\n      onUploadError?.(error);\n    },\n  });\n\n  const validateFiles = React.useCallback(\n    (fileList: File[]): string[] => {\n      const errors: string[] = [];\n\n      // Check file count\n      if (!multiple && fileList.length > 1) {\n        errors.push(\"Only one file is allowed\");\n        return errors;\n      }\n\n      if (fileList.length > maxFiles) {\n        errors.push(`Maximum ${maxFiles} files allowed`);\n        return errors;\n      }\n\n      // Validate each file\n      fileList.forEach((file, index) => {\n        // Size validation\n        if (file.size > maxSize) {\n          errors.push(\n            `File \"${file.name}\" is too large. Maximum size is ${formatFileSize(\n              maxSize\n            )}`\n          );\n        }\n\n        // Type validation\n        if (accept) {\n          const acceptedTypes = accept.split(\",\").map((type) => type.trim());\n          const isValidType = acceptedTypes.some((type) => {\n            if (type.startsWith(\".\")) {\n              return file.name.toLowerCase().endsWith(type.toLowerCase());\n            }\n            return file.type.match(type.replace(\"*\", \".*\"));\n          });\n\n          if (!isValidType) {\n            errors.push(`File \"${file.name}\" is not an accepted file type`);\n          }\n        }\n      });\n\n      // Custom validation\n      if (validator) {\n        const customError = validator(fileList);\n        if (customError) {\n          errors.push(customError);\n        }\n      }\n\n      return errors;\n    },\n    [accept, maxSize, maxFiles, multiple, validator]\n  );\n\n  const handleFiles = React.useCallback(\n    (fileList: FileList | File[]) => {\n      if (disabled || isUploading) return;\n\n      const files = Array.from(fileList);\n      const validationErrors = validateFiles(files);\n\n      if (validationErrors.length > 0) {\n        setErrors(validationErrors);\n        return;\n      }\n\n      setErrors([]);\n      onFilesAdded?.(files);\n      upload(files);\n    },\n    [disabled, isUploading, validateFiles, onFilesAdded, upload]\n  );\n\n  const handleDragOver = React.useCallback(\n    (e: React.DragEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      if (!disabled) {\n        setIsDragOver(true);\n      }\n    },\n    [disabled]\n  );\n\n  const handleDragLeave = React.useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(false);\n  }, []);\n\n  const handleDrop = React.useCallback(\n    (e: React.DragEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setIsDragOver(false);\n\n      if (disabled) return;\n\n      const files = Array.from(e.dataTransfer.files);\n      handleFiles(files);\n    },\n    [disabled, handleFiles]\n  );\n\n  const handleFileInputChange = React.useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const files = e.target.files;\n      if (files) {\n        handleFiles(files);\n      }\n      // Reset input value to allow selecting the same file again\n      e.target.value = \"\";\n    },\n    [handleFiles]\n  );\n\n  const handleClick = React.useCallback(() => {\n    if (!disabled && !isUploading) {\n      fileInputRef.current?.click();\n    }\n  }, [disabled, isUploading]);\n\n  const renderContent = () => {\n    if (isDragOver && dragContent) {\n      return dragContent;\n    }\n\n    if (children) {\n      return children;\n    }\n\n    // Default content\n    return (\n      <div className=\"flex flex-col items-center justify-center space-y-4 text-center\">\n        <div\n          className={cn(\n            \"rounded-full p-4 transition-colors\",\n            isDragOver ? \"bg-primary/20\" : \"bg-muted\"\n          )}\n        >\n          <Upload\n            className={cn(\n              \"h-8 w-8 transition-colors\",\n              isDragOver ? \"text-primary\" : \"text-muted-foreground\"\n            )}\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <h3 className=\"text-lg font-medium\">\n            {isDragOver ? \"Drop files here\" : \"Upload files\"}\n          </h3>\n          <p className=\"text-sm text-muted-foreground\">\n            {isDragOver\n              ? \"Release to upload\"\n              : `Drag and drop files here, or click to select${\n                  multiple ? ` (max ${maxFiles})` : \"\"\n                }`}\n          </p>\n          {accept && (\n            <p className=\"text-xs text-muted-foreground\">Accepted: {accept}</p>\n          )}\n          <p className=\"text-xs text-muted-foreground\">\n            Max size: {formatFileSize(maxSize)}\n          </p>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div\n        className={cn(\n          \"relative cursor-pointer rounded-lg border-2 border-dashed p-8 transition-all\",\n          isDragOver && \"border-primary bg-primary/5\",\n          !isDragOver &&\n            \"border-muted-foreground/25 hover:border-muted-foreground/50\",\n          disabled && \"cursor-not-allowed opacity-50\",\n          isUploading && \"cursor-wait\",\n          className\n        )}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n        onClick={handleClick}\n        {...props}\n      >\n        {renderContent()}\n\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          className=\"hidden\"\n          accept={accept}\n          multiple={multiple}\n          onChange={handleFileInputChange}\n          disabled={disabled || isUploading}\n        />\n      </div>\n\n      {errors.length > 0 && (\n        <div className=\"space-y-2\">\n          {errors.map((error, index) => (\n            <div\n              key={index}\n              className=\"flex items-center space-x-2 text-sm text-destructive\"\n            >\n              <AlertCircle className=\"h-4 w-4\" />\n              <span>{error}</span>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction formatFileSize(bytes: number): string {\n  if (bytes === 0) return \"0 Bytes\";\n  const k = 1024;\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n}\n",
      "type": "registry:component"
    }
  ]
}