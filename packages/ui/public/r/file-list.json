{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "file-list",
  "type": "registry:component",
  "title": "File List",
  "description": "Display a list of files with upload progress, status indicators, and actions.",
  "dependencies": [
    "pushduck",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "progress"
  ],
  "files": [
    {
      "path": "registry/default/file-list/file-list.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { AlertCircle, CheckCircle, FileIcon, X, XCircle } from \"lucide-react\";\nimport * as React from \"react\";\n\nexport interface FileItem {\n  id: string;\n  name: string;\n  size: number;\n  type: string;\n  status: \"pending\" | \"uploading\" | \"success\" | \"error\";\n  progress?: number;\n  url?: string;\n  error?: string;\n}\n\nexport interface FileListProps {\n  /** Array of files to display */\n  files: FileItem[];\n  /** Whether files can be removed */\n  allowRemove?: boolean;\n  /** Callback when file is removed */\n  onRemove?: (fileId: string) => void;\n  /** Callback when file is retried */\n  onRetry?: (fileId: string) => void;\n  /** Custom className */\n  className?: string;\n  /** Custom file item renderer */\n  renderFile?: (file: FileItem, index: number) => React.ReactNode;\n  /** Empty state content */\n  emptyContent?: React.ReactNode;\n}\n\nexport function FileList({\n  files,\n  allowRemove = true,\n  onRemove,\n  onRetry,\n  className,\n  renderFile,\n  emptyContent,\n  ...props\n}: FileListProps) {\n  if (files.length === 0) {\n    return (\n      <div className={cn(\"text-center py-8\", className)} {...props}>\n        {emptyContent || (\n          <div className=\"text-muted-foreground\">\n            <FileIcon className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n            <p>No files selected</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\"space-y-2\", className)} {...props}>\n      {files.map((file, index) =>\n        renderFile ? (\n          <div key={file.id}>{renderFile(file, index)}</div>\n        ) : (\n          <FileListItem\n            key={file.id}\n            file={file}\n            allowRemove={allowRemove}\n            onRemove={onRemove}\n            onRetry={onRetry}\n          />\n        )\n      )}\n    </div>\n  );\n}\n\ninterface FileListItemProps {\n  file: FileItem;\n  allowRemove: boolean;\n  onRemove?: (fileId: string) => void;\n  onRetry?: (fileId: string) => void;\n}\n\nfunction FileListItem({\n  file,\n  allowRemove,\n  onRemove,\n  onRetry,\n}: FileListItemProps) {\n  const getStatusIcon = () => {\n    switch (file.status) {\n      case \"success\":\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case \"error\":\n        return <XCircle className=\"h-4 w-4 text-destructive\" />;\n      case \"uploading\":\n        return (\n          <div className=\"h-4 w-4 border-2 border-primary border-t-transparent rounded-full animate-spin\" />\n        );\n      default:\n        return <AlertCircle className=\"h-4 w-4 text-muted-foreground\" />;\n    }\n  };\n\n  const getStatusText = () => {\n    switch (file.status) {\n      case \"success\":\n        return \"Uploaded\";\n      case \"error\":\n        return file.error || \"Upload failed\";\n      case \"uploading\":\n        return `Uploading... ${file.progress || 0}%`;\n      default:\n        return \"Pending\";\n    }\n  };\n\n  return (\n    <div className=\"flex items-center space-x-3 p-3 bg-muted/30 rounded-lg border\">\n      {/* File icon */}\n      <div className=\"flex-shrink-0\">\n        <FileIcon className=\"h-8 w-8 text-muted-foreground\" />\n      </div>\n\n      {/* File info */}\n      <div className=\"flex-1 min-w-0 space-y-1\">\n        <div className=\"flex items-center justify-between\">\n          <p className=\"text-sm font-medium truncate\" title={file.name}>\n            {file.name}\n          </p>\n          <div className=\"flex items-center space-x-2\">\n            {getStatusIcon()}\n            {allowRemove && (\n              <button\n                onClick={() => onRemove?.(file.id)}\n                className=\"p-1 hover:bg-muted rounded\"\n                title=\"Remove file\"\n              >\n                <X className=\"h-3 w-3\" />\n              </button>\n            )}\n          </div>\n        </div>\n\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n          <span>{formatFileSize(file.size)}</span>\n          <span>{getStatusText()}</span>\n        </div>\n\n        {/* Progress bar */}\n        {file.status === \"uploading\" && typeof file.progress === \"number\" && (\n          <div className=\"w-full bg-muted rounded-full h-1.5\">\n            <div\n              className=\"bg-primary h-1.5 rounded-full transition-all duration-300 ease-out\"\n              style={{ width: `${Math.min(100, Math.max(0, file.progress))}%` }}\n            />\n          </div>\n        )}\n\n        {/* Error message */}\n        {file.status === \"error\" && file.error && (\n          <div className=\"flex items-center justify-between\">\n            <p className=\"text-xs text-destructive\">{file.error}</p>\n            {onRetry && (\n              <button\n                onClick={() => onRetry(file.id)}\n                className=\"text-xs text-primary hover:underline\"\n              >\n                Retry\n              </button>\n            )}\n          </div>\n        )}\n\n        {/* Success link */}\n        {file.status === \"success\" && file.url && (\n          <a\n            href={file.url}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"text-xs text-primary hover:underline\"\n          >\n            View file\n          </a>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction formatFileSize(bytes: number): string {\n  if (bytes === 0) return \"0 Bytes\";\n  const k = 1024;\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n}\n",
      "type": "registry:component"
    }
  ]
}