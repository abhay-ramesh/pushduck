{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "upload-demo",
  "type": "registry:block",
  "title": "Complete Upload Demo",
  "description": "Full-featured upload interface combining dropzone, file list, and progress indicators.",
  "dependencies": [
    "pushduck",
    "lucide-react"
  ],
  "registryDependencies": [
    "upload-dropzone",
    "file-list",
    "upload-button"
  ],
  "files": [
    {
      "path": "registry/default/upload-demo/upload-demo.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport {\n  FileList,\n  type FileItem,\n} from \"@/registry/default/file-list/file-list\";\nimport { UploadButton } from \"@/registry/default/upload-button/upload-button\";\nimport { UploadDropzone } from \"@/registry/default/upload-dropzone/upload-dropzone\";\nimport * as React from \"react\";\n\nexport interface UploadDemoProps {\n  /** Upload route name from your API */\n  route: string;\n  /** Accepted file types (MIME types or extensions) */\n  accept?: string;\n  /** Maximum file size in bytes */\n  maxSize?: number;\n  /** Maximum number of files */\n  maxFiles?: number;\n  /** Whether to allow multiple files */\n  multiple?: boolean;\n  /** Show upload button alongside dropzone */\n  showButton?: boolean;\n  /** Custom className */\n  className?: string;\n  /** Callback when upload completes */\n  onUploadComplete?: (results: any[]) => void;\n  /** Callback when upload fails */\n  onUploadError?: (error: Error) => void;\n}\n\nexport function UploadDemo({\n  route,\n  accept,\n  maxSize,\n  maxFiles,\n  multiple = true,\n  showButton = true,\n  className,\n  onUploadComplete,\n  onUploadError,\n  ...props\n}: UploadDemoProps) {\n  const [files, setFiles] = React.useState<FileItem[]>([]);\n\n  const handleFilesAdded = React.useCallback((newFiles: File[]) => {\n    const fileItems: FileItem[] = newFiles.map((file) => ({\n      id: `${file.name}-${Date.now()}-${Math.random()}`,\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      status: \"pending\",\n    }));\n\n    setFiles((prev) => [...prev, ...fileItems]);\n  }, []);\n\n  const handleUploadProgress = React.useCallback(\n    (fileId: string, progress: number) => {\n      setFiles((prev) =>\n        prev.map((file) =>\n          file.id === fileId\n            ? { ...file, status: \"uploading\" as const, progress }\n            : file\n        )\n      );\n    },\n    []\n  );\n\n  const handleUploadComplete = React.useCallback(\n    (results: any[]) => {\n      // Update file statuses based on results\n      setFiles((prev) =>\n        prev.map((file) => {\n          const result = results.find((r) => r.originalName === file.name);\n          return result\n            ? {\n                ...file,\n                status: \"success\" as const,\n                url: result.url,\n                progress: 100,\n              }\n            : file;\n        })\n      );\n\n      onUploadComplete?.(results);\n    },\n    [onUploadComplete]\n  );\n\n  const handleUploadError = React.useCallback(\n    (error: Error) => {\n      setFiles((prev) =>\n        prev.map((file) =>\n          file.status === \"uploading\" || file.status === \"pending\"\n            ? { ...file, status: \"error\" as const, error: error.message }\n            : file\n        )\n      );\n\n      onUploadError?.(error);\n    },\n    [onUploadError]\n  );\n\n  const handleRemoveFile = React.useCallback((fileId: string) => {\n    setFiles((prev) => prev.filter((file) => file.id !== fileId));\n  }, []);\n\n  const handleRetryFile = React.useCallback((fileId: string) => {\n    setFiles((prev) =>\n      prev.map((file) =>\n        file.id === fileId\n          ? {\n              ...file,\n              status: \"pending\" as const,\n              error: undefined,\n              progress: 0,\n            }\n          : file\n      )\n    );\n  }, []);\n\n  return (\n    <div className={cn(\"space-y-6\", className)} {...props}>\n      {/* Upload Area */}\n      <div className=\"space-y-4\">\n        <UploadDropzone\n          route={route}\n          accept={accept}\n          maxSize={maxSize}\n          maxFiles={maxFiles}\n          multiple={multiple}\n          onFilesAdded={handleFilesAdded}\n          onUploadComplete={handleUploadComplete}\n          onUploadError={handleUploadError}\n        />\n\n        {showButton && (\n          <div className=\"flex justify-center\">\n            <UploadButton\n              route={route}\n              accept={accept}\n              multiple={multiple}\n              onFilesSelected={handleFilesAdded}\n              onUploadComplete={handleUploadComplete}\n              onUploadError={handleUploadError}\n              variant=\"outline\"\n            >\n              Or choose files\n            </UploadButton>\n          </div>\n        )}\n      </div>\n\n      {/* File List */}\n      {files.length > 0 && (\n        <div className=\"space-y-2\">\n          <h3 className=\"text-lg font-medium\">Files</h3>\n          <FileList\n            files={files}\n            allowRemove={true}\n            onRemove={handleRemoveFile}\n            onRetry={handleRetryFile}\n          />\n        </div>\n      )}\n\n      {/* Summary */}\n      {files.length > 0 && (\n        <div className=\"text-sm text-muted-foreground space-y-1\">\n          <div className=\"flex justify-between\">\n            <span>Total files:</span>\n            <span>{files.length}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>Uploaded:</span>\n            <span>{files.filter((f) => f.status === \"success\").length}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>Failed:</span>\n            <span>{files.filter((f) => f.status === \"error\").length}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>Total size:</span>\n            <span>\n              {formatFileSize(files.reduce((sum, file) => sum + file.size, 0))}\n            </span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction formatFileSize(bytes: number): string {\n  if (bytes === 0) return \"0 Bytes\";\n  const k = 1024;\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n}\n",
      "type": "registry:component"
    }
  ]
}