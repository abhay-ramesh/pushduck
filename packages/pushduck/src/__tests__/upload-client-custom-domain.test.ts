import { describe, expect, it } from "vitest";
import { createUploadConfig } from "../core/config/upload-config";
import { getFileUrl } from "../core/storage/client";

describe("Upload Client Custom Domain Integration", () => {
  it("should return custom domain URL in file.url after upload completion", () => {
    const { config } = createUploadConfig()
      .provider("aws", {
        accessKeyId: "test-key",
        secretAccessKey: "test-secret",
        region: "us-east-1",
        bucket: "test-bucket",
        customDomain: "https://cdn.example.com",
      })
      .build();

    // Simulate the router's handleUploadComplete method
    const completionKey = "uploads/test-image.jpg";

    // This is what the router calls to generate the URL
    const fileUrl = getFileUrl(config, completionKey);

    // This URL should be returned in the CompletionResponse
    // and eventually set as file.url in the upload client
    expect(fileUrl).toBe("https://cdn.example.com/uploads/test-image.jpg");
  });

  it("should handle nested paths with custom domain", () => {
    const { config } = createUploadConfig()
      .provider("aws", {
        accessKeyId: "test-key",
        secretAccessKey: "test-secret",
        region: "us-east-1",
        bucket: "test-bucket",
        customDomain: "https://cdn.example.com",
      })
      .build();

    // Test with nested paths that might be generated by the router
    const nestedKey = "uploads/user-123/profile/avatar.jpg";
    const fileUrl = getFileUrl(config, nestedKey);

    expect(fileUrl).toBe(
      "https://cdn.example.com/uploads/user-123/profile/avatar.jpg"
    );
  });

  it("should work with different file types and extensions", () => {
    const { config } = createUploadConfig()
      .provider("aws", {
        accessKeyId: "test-key",
        secretAccessKey: "test-secret",
        region: "us-east-1",
        bucket: "test-bucket",
        customDomain: "https://cdn.example.com",
      })
      .build();

    // Test various file types
    const testCases = [
      "uploads/document.pdf",
      "uploads/video.mp4",
      "uploads/audio.mp3",
      "uploads/archive.zip",
      "uploads/data.json",
    ];

    testCases.forEach((key) => {
      const fileUrl = getFileUrl(config, key);
      expect(fileUrl).toBe(`https://cdn.example.com/${key}`);
    });
  });

  it("should fall back to S3 URL when custom domain is not configured", () => {
    const { config } = createUploadConfig()
      .provider("aws", {
        accessKeyId: "test-key",
        secretAccessKey: "test-secret",
        region: "us-east-1",
        bucket: "test-bucket",
        // No customDomain configured
      })
      .build();

    const completionKey = "uploads/test-image.jpg";
    const fileUrl = getFileUrl(config, completionKey);

    // Should fall back to standard S3 URL
    expect(fileUrl).toBe(
      "https://test-bucket.s3.us-east-1.amazonaws.com/uploads/test-image.jpg"
    );
  });

  it("should handle custom domain with and without trailing slash", () => {
    const { config } = createUploadConfig()
      .provider("aws", {
        accessKeyId: "test-key",
        secretAccessKey: "test-secret",
        region: "us-east-1",
        bucket: "test-bucket",
        customDomain: "https://cdn.example.com/", // With trailing slash
      })
      .build();

    const completionKey = "uploads/test-image.jpg";
    const fileUrl = getFileUrl(config, completionKey);

    // Should handle trailing slash correctly
    expect(fileUrl).toBe("https://cdn.example.com/uploads/test-image.jpg");
  });
});
