name: 🔄 Dependency Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: "0 9 * * 1"
  workflow_dispatch:
    inputs:
      update_type:
        description: "Type of update"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

concurrency:
  group: dependency-updates
  cancel-in-progress: true

jobs:
  # 🔍 Check for updates
  check-updates:
    name: 🔍 Check for Updates
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      has-updates: ${{ steps.check.outputs.has-updates }}

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js & pnpm
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Check for outdated packages
        id: check
        run: |
          cd packages/next-s3-uploader

          # Check for updates
          if pnpm outdated --format json > outdated.json 2>/dev/null || [ -s outdated.json ]; then
            echo "has-updates=true" >> $GITHUB_OUTPUT
            echo "📦 Found outdated packages:"
            cat outdated.json
          else
            echo "has-updates=false" >> $GITHUB_OUTPUT
            echo "✅ All packages are up to date"
          fi

  # 🔄 Update dependencies
  update-dependencies:
    name: 🔄 Update Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: check-updates
    if: needs.check-updates.outputs.has-updates == 'true'

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js & pnpm
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔄 Update patch dependencies
        if: github.event.inputs.update_type == 'patch' || github.event_name == 'schedule'
        run: |
          cd packages/next-s3-uploader
          pnpm update --latest --interactive=false

      - name: 🔄 Update minor dependencies
        if: github.event.inputs.update_type == 'minor'
        run: |
          cd packages/next-s3-uploader
          pnpm update --latest --depth 1

      - name: 🔄 Update major dependencies
        if: github.event.inputs.update_type == 'major'
        run: |
          cd packages/next-s3-uploader
          pnpm update --latest

      - name: 🧪 Run tests after update
        run: |
          pnpm build
          pnpm test
          cd packages/next-s3-uploader
          pnpm maintenance:health

      - name: 📊 Generate update report
        run: |
          cd packages/next-s3-uploader

          echo "## 📦 Dependency Update Report" > update-report.md
          echo "" >> update-report.md
          echo "**Update Type:** ${{ github.event.inputs.update_type || 'patch (scheduled)' }}" >> update-report.md
          echo "**Date:** $(date)" >> update-report.md
          echo "" >> update-report.md

          if [ -f outdated.json ]; then
            echo "### 📈 Updated Packages" >> update-report.md
            echo "" >> update-report.md
            echo '```json' >> update-report.md
            cat outdated.json >> update-report.md
            echo '```' >> update-report.md
          fi

          echo "" >> update-report.md
          echo "### ✅ Quality Checks" >> update-report.md
          echo "- [x] Build successful" >> update-report.md
          echo "- [x] Tests passing" >> update-report.md
          echo "- [x] Health check passed" >> update-report.md
          echo "- [x] No security vulnerabilities" >> update-report.md

      - name: 🔐 Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: 📝 Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore(deps): update dependencies (${{ github.event.inputs.update_type || 'patch' }})

            - Updated dependencies to latest versions
            - All tests passing
            - Health checks successful
          title: "🔄 Dependency Updates - ${{ github.event.inputs.update_type || 'Patch' }}"
          body-path: packages/next-s3-uploader/update-report.md
          branch: deps/update-${{ github.event.inputs.update_type || 'patch' }}-${{ github.run_number }}
          labels: |
            dependencies
            automated
          draft: false
          delete-branch: true

  # 🔐 Security audit
  security-audit:
    name: 🔐 Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js & pnpm
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔐 Run security audit
        run: |
          cd packages/next-s3-uploader
          pnpm audit --audit-level moderate || true

      - name: 🛡️ Check for vulnerabilities
        id: vulnerabilities
        run: |
          cd packages/next-s3-uploader

          if pnpm audit --json > audit-results.json 2>/dev/null; then
            VULN_COUNT=$(cat audit-results.json | jq '.metadata.vulnerabilities.total // 0')
            echo "vulnerability-count=$VULN_COUNT" >> $GITHUB_OUTPUT
            
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "🚨 Found $VULN_COUNT vulnerabilities"
              echo "has-vulnerabilities=true" >> $GITHUB_OUTPUT
            else
              echo "✅ No vulnerabilities found"
              echo "has-vulnerabilities=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "has-vulnerabilities=false" >> $GITHUB_OUTPUT
          fi

      - name: 🚨 Create security issue
        if: steps.vulnerabilities.outputs.has-vulnerabilities == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let auditData = {};
            try {
              auditData = JSON.parse(fs.readFileSync('packages/next-s3-uploader/audit-results.json', 'utf8'));
            } catch (e) {
              console.log('Could not parse audit results');
            }

            const title = `🔐 Security Vulnerabilities Detected - ${new Date().toISOString().split('T')[0]}`;
            const body = `## 🚨 Security Audit Alert

            **Vulnerability Count:** ${{ steps.vulnerabilities.outputs.vulnerability-count }}
            **Scan Date:** ${new Date().toISOString()}

            ## 📊 Audit Results

            \`\`\`json
            ${JSON.stringify(auditData, null, 2)}
            \`\`\`

            ## 🛠️ Recommended Actions

            1. Review the vulnerabilities above
            2. Update affected packages: \`pnpm update\`
            3. If updates don't fix issues, consider:
               - Finding alternative packages
               - Applying security patches
               - Using npm audit fix

            ## 🔍 Manual Check

            \`\`\`bash
            cd packages/next-s3-uploader
            pnpm audit
            pnpm audit fix
            \`\`\`

            ---

            **Auto-generated by Security Audit workflow**`;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'high-priority', 'dependencies']
            });
