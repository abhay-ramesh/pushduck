# Package Publishing Workflow
# Triggers when GitHub releases are published (from any source)
# Handles NPM publishing and release notes enhancement

name: Publish Packages

on:
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  validate-release:
    name: üîç Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      version: ${{ steps.extract.outputs.version }}
      is_prerelease: ${{ steps.extract.outputs.is_prerelease }}
      packages_changed: ${{ steps.extract.outputs.packages_changed }}

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üèóÔ∏è Setup project
        uses: ./.github/actions/setup

      - name: üéØ Extract release info
        id: extract
        run: |
          # Extract version from release tag (remove 'v' prefix if present)
          VERSION="${{ github.event.release.tag_name }}"
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Check if it's a prerelease
          IS_PRERELEASE="${{ github.event.release.prerelease }}"
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT

          # Check if packages need to be published
          echo "packages_changed=true" >> $GITHUB_OUTPUT

          echo "üìã Release Info:"
          echo "  Tag: ${{ github.event.release.tag_name }}"
          echo "  Version: $VERSION"
          echo "  Prerelease: $IS_PRERELEASE"
          echo "  Draft: ${{ github.event.release.draft }}"

      - name: ‚úÖ Validate version format
        run: |
          VERSION="${{ steps.extract.outputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: x.y.z or x.y.z-prerelease"
            exit 1
          fi
          echo "‚úÖ Version format is valid: $VERSION"

  test:
    name: üõ°Ô∏è Test & Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: validate-release

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üèóÔ∏è Setup project
        uses: ./.github/actions/setup

      - name: üß™ Run tests
        run: pnpm test

      - name: üîç Type check
        run: pnpm type-check

      - name: üé® Lint check
        run: pnpm lint

      - name: üèóÔ∏è Build check
        run: pnpm build:packages

      - name: üìä Bundle size check
        run: |
          cd packages/pushduck
          pnpm size-check

      - name: üõ°Ô∏è Health check
        run: |
          cd packages/pushduck
          if [ -f "scripts/health-check.sh" ]; then
            chmod +x scripts/health-check.sh
            ./scripts/health-check.sh
          else
            echo "‚ö†Ô∏è Health check script not found, skipping"
          fi

  build:
    name: üèóÔ∏è Build Packages
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-release, test]

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üèóÔ∏è Setup project
        uses: ./.github/actions/setup

      - name: üèóÔ∏è Build all packages
        run: pnpm build:packages

      - name: üìä Generate bundle analysis
        run: |
          cd packages/pushduck
          if [ -f "scripts/size-check.js" ]; then
            node scripts/size-check.js > bundle-analysis.txt
            echo "üì¶ **Bundle Analysis for v${{ needs.validate-release.outputs.version }}**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat bundle-analysis.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: üì¶ Package artifacts
        run: |
          # Create dist archive for each package
          cd packages/pushduck && tar -czf ../../pushduck-dist.tar.gz dist/
          cd ../cli && tar -czf ../../cli-dist.tar.gz dist/

      - name: üíæ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            pushduck-dist.tar.gz
            cli-dist.tar.gz
          retention-days: 7

  publish-npm:
    name: üì¶ Publish to NPM
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-release, test, build]
    if: ${{ needs.validate-release.outputs.packages_changed == 'true' }}
    permissions:
      contents: read
      id-token: write

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üèóÔ∏è Setup project
        uses: ./.github/actions/setup

      - name: üíæ Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: üì¶ Extract build artifacts
        run: |
          cd packages/pushduck && tar -xzf ../../pushduck-dist.tar.gz
          cd ../cli && tar -xzf ../../cli-dist.tar.gz

      - name: üì¶ Setup NPM registry
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          always-auth: true

      - name: üîê Verify NPM authentication
        run: |
          if [ -z "$NPM_TOKEN" ]; then
            echo "‚ùå NPM_TOKEN is not set"
            exit 1
          fi
          echo "‚úÖ NPM token is configured"

          # Test authentication
          npm whoami
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: üîç Pre-publish validation
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"

          # Function to check package existence
          check_package_exists() {
            local package_name=$1
            echo "üîç Checking if $package_name@$VERSION already exists..."
            
            if npm view "$package_name@$VERSION" version 2>/dev/null; then
              echo "‚ö†Ô∏è $package_name@$VERSION already exists on npm"
              echo "üîç Existing version info:"
              npm view "$package_name@$VERSION" --json 2>/dev/null | jq -r '.version, .publishedAt' || true
              return 1
            else
              echo "‚úÖ $package_name@$VERSION is available for publishing"
              return 0
            fi
          }

          # Check both packages
          PUSHDUCK_AVAILABLE=true
          CLI_AVAILABLE=true

          if ! check_package_exists "pushduck"; then
            PUSHDUCK_AVAILABLE=false
          fi

          if ! check_package_exists "@pushduck/cli"; then
            CLI_AVAILABLE=false
          fi

          # If both packages already exist, this might be a retry
          if [ "$PUSHDUCK_AVAILABLE" = false ] && [ "$CLI_AVAILABLE" = false ]; then
            echo "‚ö†Ô∏è Both packages already exist. This might be a workflow retry."
            echo "ü§î Checking if this is a valid retry scenario..."
            
            # Allow the workflow to continue but we'll skip actual publishing
            echo "SKIP_PUBLISH=true" >> $GITHUB_ENV
          elif [ "$PUSHDUCK_AVAILABLE" = false ] || [ "$CLI_AVAILABLE" = false ]; then
            echo "‚ùå Partial publication detected. This is an inconsistent state."
            echo "üìã Manual intervention may be required."
            exit 1
          else
            echo "‚úÖ Version $VERSION is available for publishing both packages"
            echo "SKIP_PUBLISH=false" >> $GITHUB_ENV
          fi

      - name: üì§ Publish pushduck package
        run: |
          if [ "$SKIP_PUBLISH" = "true" ]; then
            echo "‚è≠Ô∏è Skipping pushduck publication - package already exists"
            exit 0
          fi

          cd packages/pushduck

          # Publish with provenance and public access
          if [[ "${{ needs.validate-release.outputs.is_prerelease }}" == "true" ]]; then
            echo "üì¶ Publishing prerelease version..."
            npm publish --provenance --access public --tag beta
          else
            echo "üì¶ Publishing stable version..."
            npm publish --provenance --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: üì§ Publish CLI package
        run: |
          if [ "$SKIP_PUBLISH" = "true" ]; then
            echo "‚è≠Ô∏è Skipping CLI publication - package already exists"
            exit 0
          fi

          cd packages/cli

          # Publish with provenance and public access
          if [[ "${{ needs.validate-release.outputs.is_prerelease }}" == "true" ]]; then
            echo "üì¶ Publishing prerelease CLI version..."
            npm publish --provenance --access public --tag beta
          else
            echo "üì¶ Publishing stable CLI version..."
            npm publish --provenance --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: ‚úÖ Verify publication
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"

          # Function to verify package with retries
          verify_package() {
            local package_name=$1
            local max_attempts=5
            local delay=10

            for attempt in $(seq 1 $max_attempts); do
              echo "üîç Attempt $attempt/$max_attempts: Verifying $package_name@$VERSION..."
              
              if npm view "$package_name@$VERSION" version 2>/dev/null; then
                echo "‚úÖ $package_name@$VERSION verified successfully!"
                return 0
              else
                if [ $attempt -lt $max_attempts ]; then
                  echo "‚è≥ Package not yet available, waiting ${delay}s before retry..."
                  sleep $delay
                else
                  echo "‚ùå Failed to verify $package_name@$VERSION after $max_attempts attempts"
                  echo "üîç Checking if package exists with different version..."
                  npm view "$package_name" versions --json 2>/dev/null || echo "Package not found in registry"
                  return 1
                fi
              fi
            done
          }

          # Verify both packages
          echo "üîç Verifying package publications..."

          if verify_package "pushduck"; then
            echo "‚úÖ pushduck package verified"
          else
            echo "‚ö†Ô∏è pushduck verification failed, but package may have been published"
          fi

          if verify_package "@pushduck/cli"; then
            echo "‚úÖ CLI package verified"
          else
            echo "‚ö†Ô∏è CLI verification failed, but package may have been published"
          fi

          echo "üì¶ Publication process completed. Note: npm registry may take a few minutes to fully propagate."

      - name: üìù Enhance release notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          TAG="${{ github.event.release.tag_name }}"

          # Get current release notes (user's custom notes)
          CUSTOM_NOTES="${{ github.event.release.body }}"

          # Generate auto-generated release notes from GitHub
          echo "ü§ñ Generating auto-release notes..."
          AUTO_NOTES=$(gh api repos/${{ github.repository }}/releases/generate-notes \
            --method POST \
            --field tag_name="$TAG" \
            --field target_commitish="${{ github.event.release.target_commitish }}" \
            --jq '.body')

          # Combine notes: Auto-generated first, then custom notes
          ENHANCED_NOTES="$AUTO_NOTES"

          # If custom notes exist and are not empty, append them
          if [ -n "$CUSTOM_NOTES" ] && [ "$CUSTOM_NOTES" != "null" ] && [ "$CUSTOM_NOTES" != "" ]; then
            ENHANCED_NOTES="$AUTO_NOTES

          ---

          $CUSTOM_NOTES"
          fi

          # Add npm package information
          NPM_SECTION="

          ---

          ## üì¶ NPM Packages

          - **Core Package**: [\`pushduck@$VERSION\`](https://www.npmjs.com/package/pushduck/v/$VERSION)
          - **CLI Package**: [\`@pushduck/cli@$VERSION\`](https://www.npmjs.com/package/@pushduck/cli/v/$VERSION)

          ## üöÄ Installation

          \`\`\`bash
          # Install core package
          npm install pushduck@$VERSION

          # Install CLI (optional)
          npm install -g @pushduck/cli@$VERSION
          \`\`\`

          ## üìä Bundle Sizes

          \$(cd packages/pushduck && node scripts/size-check.js 2>/dev/null || echo \"Bundle size information not available\")

          ## üîó Links

          - [Documentation](https://pushduck.dev)
          - [Examples](https://github.com/${{ github.repository }}/tree/main/examples)
          - [Changelog](https://github.com/${{ github.repository }}/releases)"

          # Update release with enhanced notes
          echo "üìù Updating release notes..."
          gh release edit "$TAG" --notes "$ENHANCED_NOTES$NPM_SECTION"

          echo "‚úÖ Release notes enhanced successfully!"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-success:
    name: üéâ Success Notification
    runs-on: ubuntu-latest
    needs: [validate-release, test, build, publish-npm]
    if: success()

    steps:
      - name: üéâ Success summary
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          TAG="${{ github.event.release.tag_name }}"

          echo "üéâ **Release $TAG Published Successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Tests passed**" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Packages built**" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Published to NPM**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üì¶ Published Packages" >> $GITHUB_STEP_SUMMARY
          echo "- [\`pushduck@$VERSION\`](https://www.npmjs.com/package/pushduck/v/$VERSION)" >> $GITHUB_STEP_SUMMARY
          echo "- [\`@pushduck/cli@$VERSION\`](https://www.npmjs.com/package/@pushduck/cli/v/$VERSION)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîó [View Release](https://github.com/${{ github.repository }}/releases/tag/$TAG)" >> $GITHUB_STEP_SUMMARY

  notify-failure:
    name: üö® Failure Notification
    runs-on: ubuntu-latest
    needs: [validate-release, test, build, publish-npm]
    if: failure()
    permissions:
      issues: write
      contents: read

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üö® Create failure issue
        uses: actions/github-script@v7
        with:
          script: |
            const tag = context.payload.release.tag_name;
            const version = tag.replace(/^v/, '');
            const releaseUrl = context.payload.release.html_url;
            const workflowUrl = `${context.payload.repository.html_url}/actions/runs/${context.runId}`;

            const title = `üö® Release ${tag} publication failed`;
            const body = `
            ## Release Publication Failure

            **Release**: [${tag}](${releaseUrl})
            **Version**: \`${version}\`
            **Workflow Run**: [View Logs](${workflowUrl})

            ### What Happened
            The GitHub release was created successfully, but the npm publication failed.

            ### Next Steps
            1. Check the [workflow logs](${workflowUrl}) for detailed error information
            2. Fix any issues (authentication, version conflicts, etc.)
            3. Re-run the workflow or manually publish the packages

            ### Manual Publication Commands
            \`\`\`bash
            # If you need to publish manually:
            cd packages/pushduck && npm publish
            cd ../cli && npm publish
            \`\`\`

            ---
            *This issue was automatically created by the release workflow.*
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['release-failure', 'bug', 'npm']
            });
