# Release Workflow - GitHub Native Auto-Release Notes
# Automatic release creation when tags are pushed using GitHub's built-in features

name: Release

on:
  push:
    tags:
      - "*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  test:
    name: 🛡️ Test & Safety Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup project
        uses: ./.github/actions/setup

      - name: 🛡️ Run comprehensive safety check
        run: |
          cd packages/pushduck
          chmod +x scripts/health-check.sh
          ./scripts/health-check.sh

      - name: 🔍 Run all quality checks
        run: |
          pnpm type-check
          pnpm test:coverage
          pnpm size-check

  release:
    name: 🚀 Create GitHub Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: test
    permissions:
      contents: write
      pull-requests: read
      issues: read

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup project
        uses: ./.github/actions/setup

      - name: 🏗️ Build packages
        run: pnpm build:packages

      - name: 📊 Generate bundle analysis
        run: |
          cd packages/pushduck
          node scripts/size-check.js > size-report.txt
          echo "📦 **Bundle Analysis**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat size-report.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: 🎯 Extract tag info
        id: tag_info
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "is_prerelease=${{ contains(github.ref, '-') }}" >> $GITHUB_OUTPUT

      - name: 🚀 Create GitHub Release with Auto-Generated Notes
        run: |
          TAG_NAME="${{ steps.tag_info.outputs.tag_name }}"
          PRERELEASE_FLAG=""
          if [[ "${{ steps.tag_info.outputs.is_prerelease }}" == "true" ]]; then
            PRERELEASE_FLAG="--prerelease"
          fi

          gh release create "$TAG_NAME" \
            --title "$TAG_NAME" \
            --generate-notes \
            $PRERELEASE_FLAG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: 📦 Publish to NPM
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test, release]
    if: ${{ !contains(github.ref, '-') }} # Only publish stable releases
    permissions:
      contents: read
      id-token: write

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🏗️ Setup project
        uses: ./.github/actions/setup

      - name: 🏗️ Build packages
        run: pnpm build:packages

      - name: 📦 Setup NPM registry
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          always-auth: true

      - name: 🔐 Verify NPM token
        run: |
          if [ -z "$NPM_TOKEN" ]; then
            echo "❌ NPM_TOKEN is not set"
            exit 1
          fi
          echo "✅ NPM token is configured"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 📤 Publish to NPM
        run: |
          cd packages/pushduck && npm publish --provenance --access public
          cd ../cli && npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: ✅ Verify NPM publication
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}

          echo "🔍 Verifying pushduck@$VERSION..."
          npm view pushduck@$VERSION version

          echo "🔍 Verifying @pushduck/cli@$VERSION..."
          npm view @pushduck/cli@$VERSION version

          echo "✅ Both packages published successfully!"

      - name: 💬 Success notification
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "🎉 **Release $TAG_NAME Complete!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Tests passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ GitHub release created with auto-generated notes" >> $GITHUB_STEP_SUMMARY
          echo "✅ NPM packages published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View Release](https://github.com/${{ github.repository }}/releases/tag/$TAG_NAME)" >> $GITHUB_STEP_SUMMARY

  failure_notification:
    name: 🚨 Failure Notification
    runs-on: ubuntu-latest
    needs: [test, release, publish]
    if: failure()
    permissions:
      issues: write
      contents: read

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🚨 Create failure issue
        uses: actions/github-script@v7
        with:
          script: |
            const tag = context.ref.replace('refs/tags/', '');
            const title = `🚨 Release ${tag} failed`;
            const body = `
            ## Release Failure Report

            **Tag:** \`${tag}\`
            **Workflow:** ${context.workflow}
            **Run:** [#${context.runNumber}](${context.payload.repository.html_url}/actions/runs/${context.runId})

            ### Failed Jobs
            Please check the workflow logs for detailed error information.

            ### Next Steps
            1. Review the failed job logs
            2. Fix any issues
            3. Re-run the release workflow or create a new tag

            ---
            *This issue was automatically created by the release workflow.*
            `;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['release-failure', 'bug']
            });
